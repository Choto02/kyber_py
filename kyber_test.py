from hashlib import sha3_256, sha3_512, shake_128, shake_256

# Kyber-512 Parameters
KYBER_N = 256  # Polynomial degree
KYBER_Q = 3329  # Modulus
KYBER_K = 2  # Number of polynomials in the vector (k = 2 for Kyber-512)
du = 10
dv = 4
ETA1 = 3  # CBD parameter for Kyber-512
ETA2 = 2

zetas = [1, 1729, 2580, 3289, 2642, 630, 1897, 848,
    1062, 1919, 193, 797, 2786, 3260, 569, 1746,
    296, 2447, 1339, 1476, 3046, 56, 2240, 1333,
    1426, 2094, 535, 2882, 2393, 2879, 1974, 821,
    289, 331, 3253, 1756, 1197, 2304, 2277, 2055,
    650, 1977, 2513, 632, 2865, 33, 1320, 1915,
    2319, 1435, 807, 452, 1438, 2868, 1534, 2402,
    2647, 2617, 1481, 648, 2474, 3110, 1227, 910,
    17, 2761, 583, 2649, 1637, 723, 2288, 1100,
    1409, 2662, 3281, 233, 756, 2156, 3015, 3050,
    1703, 1651, 2789, 1789, 1847, 952, 1461, 2687,
    939, 2308, 2437, 2388, 733, 2337, 268, 641,
    1584, 2298, 2037, 3220, 375, 2549, 2090, 1645,
    1063, 319, 2773, 757, 2099, 561, 2466, 2594,
    2804, 1092, 403, 1026, 1143, 2150, 2775, 886,
    1722, 1212, 1874, 1029, 2110, 2935, 885, 2154]

zetas2 = [17, -17, 2761, -2761, 583, -583, 2649, -2649,
    1637, -1637, 723, -723, 2288, -2288, 1100, -1100,
    1409, -1409, 2662, -2662, 3281, -3281, 233, -233,
    756, -756, 2156, -2156, 3015, -3015, 3050, -3050,
    1703, -1703, 1651, -1651, 2789, -2789, 1789, -1789,
    1847, -1847, 952, -952, 1461, -1461, 2687, -2687,
    939, -939, 2308, -2308, 2437, -2437, 2388, -2388,
    733, -733, 2337, -2337, 268, -268, 641, -641,
    1584, -1584, 2298, -2298, 2037, -2037, 3220, -3220,
    375, -375, 2549, -2549, 2090, -2090, 1645, -1645,
    1063, -1063, 319, -319, 2773, -2773, 757, -757,
    2099, -2099, 561, -561, 2466, -2466, 2594, -2594,
    2804, -2804, 1092, -1092, 403, -403, 1026, -1026,
    1143, -1143, 2150, -2150, 2775, -2775, 886, -886,
    1722, -1722, 1212, -1212, 1874, -1874, 1029, -1029,
    2110, -2110, 2935, -2935, 885, -885, 2154, -2154]

def G(s):
    """
    Hash function described in 4.5 of FIPS 203 (page 18)
    """
    h = sha3_512(s).digest()
    return h[:32], h[32:]


if __name__ == "__main__":
    ek_pke = [128, 136, 173, 34, 234, 204, 158, 200, 198, 68, 138, 74, 223, 26, 61, 199, 56, 175, 9, 60, 87, 196, 166, 194, 98, 38, 60, 215, 86, 203, 77, 228, 102, 51, 90, 65, 247, 2, 127, 147, 0, 207, 140, 130, 169, 234, 180, 200, 167, 116, 83, 163, 58, 119, 197, 129, 93, 165, 59, 131, 49, 130, 32, 78, 135, 159, 105, 224, 13, 15, 5, 0, 239, 165, 69, 201, 120, 140, 164, 72, 85, 4, 41, 171, 66, 70, 198, 227, 16, 192, 21, 9, 133, 236, 209, 11, 177, 18, 88, 237, 214, 83, 223, 33, 23, 54, 195, 129, 162, 118, 52, 68, 88, 40, 83, 90, 162, 80, 176, 206, 183, 170, 115, 122, 177, 83, 228, 180, 7, 89, 156, 121, 121, 246, 54, 79, 2, 29, 37, 176, 20, 28, 214, 143, 8, 229, 16, 155, 44, 71, 8, 183, 60, 118, 57, 38, 55, 247, 39, 180, 218, 86, 208, 112, 120, 182, 25, 8, 155, 80, 68, 178, 121, 184, 37, 196, 10, 88, 119, 109, 90, 18, 57, 214, 38, 150, 84, 69, 106, 132, 87, 190, 64, 97, 89, 182, 188, 197, 155, 138, 54, 80, 164, 153, 183, 243, 121, 124, 1, 204, 253, 195, 73, 69, 35, 135, 226, 224, 96, 220, 81, 129, 154, 123, 148, 32, 103, 158, 6, 193, 184, 156, 145, 54, 230, 80, 82, 125, 178, 185, 94, 39, 13, 191, 248, 67, 167, 112, 77, 232, 161, 107, 226, 68, 33, 1, 211, 12, 76, 155, 98, 247, 67, 147, 124, 180, 26, 131, 85, 21, 91, 108, 1, 78, 84, 187, 154, 102, 83, 191, 51, 11, 185, 236, 78, 158, 140, 96, 3, 161, 31, 239, 165, 53, 34, 131, 169, 0, 7, 160, 112, 9, 138, 88, 129, 166, 117, 210, 126, 169, 182, 88, 189, 230, 113, 90, 69, 44, 148, 137, 118, 174, 249, 134, 79, 180, 193, 13, 160, 59, 41, 147, 97, 131, 107, 203, 71, 33, 166, 0, 39, 146, 191, 68, 155, 191, 168, 110, 90, 227, 47, 46, 220, 87, 172, 178, 79, 206, 96, 127, 178, 5, 110, 157, 40, 44, 172, 247, 175, 51, 58, 168, 230, 34, 51, 137, 210, 196, 252, 186, 174, 122, 148, 61, 238, 149, 135, 209, 234, 138, 250, 195, 165, 4, 60, 110, 126, 208, 75, 226, 40, 176, 106, 40, 105, 200, 96, 154, 137, 154, 168, 218, 156, 188, 173, 115, 140, 65, 215, 26, 123, 2, 14, 234, 69, 58, 247, 103, 32, 38, 105, 155, 49, 236, 89, 210, 96, 48, 187, 145, 15, 206, 202, 43, 160, 241, 207, 176, 249, 44, 47, 144, 62, 208, 121, 171, 195, 150, 94, 160, 148, 40, 170, 154, 131, 198, 8, 156, 133, 204, 12, 192, 70, 36, 227, 99, 70, 79, 194, 199, 20, 204, 109, 233, 155, 187, 153, 214, 77, 209, 187, 63, 190, 194, 111, 253, 114, 143, 143, 123, 24, 176, 211, 199, 36, 248, 188, 223, 228, 21, 234, 156, 172, 53, 99, 58, 179, 196, 41, 150, 44, 190, 54, 115, 126, 46, 136, 180, 30, 123, 193, 142, 193, 145, 252, 213, 52, 95, 147, 43, 79, 97, 136, 39, 73, 77, 149, 97, 90, 27, 10, 77, 11, 247, 194, 138, 122, 195, 43, 204, 95, 188, 145, 86, 251, 233, 192, 214, 85, 114, 223, 112, 123, 40, 164, 1, 182, 220, 71, 174, 64, 149, 100, 48, 200, 5, 210, 193, 214, 74, 35, 138, 194, 186, 33, 167, 79, 58, 117, 172, 217, 220, 192, 35, 7, 135, 203, 102, 94, 82, 24, 136, 249, 122, 198, 0, 69, 100, 0, 48, 134, 30, 68, 201, 30, 155, 66, 3, 195, 26, 157, 98, 67, 26, 165, 8, 114, 198, 120, 21, 225, 203, 153, 114, 40, 130, 131, 116, 12, 43, 174, 246, 181, 85, 104, 184, 79, 72, 233, 146, 63, 165, 59, 157, 98, 94, 29, 209, 190, 123, 164, 94, 46, 72, 126, 44, 167, 41, 250, 232, 197, 213, 229, 178, 131, 245, 95, 136, 106, 49, 37, 193, 18, 13, 201, 7, 141, 19, 90, 175, 27, 114, 28, 176, 71, 107, 89, 164, 229, 89, 107, 15, 55, 149, 197, 163, 116, 94, 49, 151, 105, 250, 133, 79, 118, 53, 70, 20, 83, 44, 146, 203, 56, 131, 172, 187, 162, 113, 30, 71, 182, 66, 148, 117, 129, 70, 195, 254, 214, 135, 72, 172, 39, 134, 163, 170, 247, 217, 130, 183, 130, 34, 205, 228, 201, 217, 114, 109, 203, 243, 68, 60, 114, 120, 140, 13, 148, 205, 30, 64, 144, 138, 126, 183, 69, 208, 177, 11, 162, 110, 104, 166, 38, 2, 213, 174, 238, 13, 160, 150]
    t_hat_bytes, rho = ek_pke[:-32], ek_pke[-32:]
    r = G(bytes(1422))
    #ciphertext = K_PKE_Encrypt(ek_pke, bytes(12345),r)
    print(r)
